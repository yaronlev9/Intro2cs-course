import tkinter as tkfrom tkinter import messageboxfrom ex12.game import Gamefrom ex12.ai import AIimport timeimport randomclass Four_In_A_Row:    '''a class Four In A Row that makes the gui object of the game four in a row'''    X_MIN, X_MAX = 25, 510    Y_MIN, Y_MAX = 12, 535    COLUMN_SIZE = 69.3    ROW_SIZE = 81.3    PLAYERS = (1, 2)    def __init__(self,root,game,red_counter = 0,blue_counter = 0,draw_counter = 0):        '''this method is the constructor of the objects in the class (the four in a row game)                 and gives it the attributes: root,game,red_counter,blue counter,draw_counter,                 all the images nedded for the gui and creates the canvas'''        self.__root = root        self.__game = game        self.__red_counter = red_counter        self.__blue_counter = blue_counter        self.__draw_counter = draw_counter        self.__is_red_ai = False        self.__is_blue_ai = False        self.__discs = []        self.__windows = []        self.__current_turn = None        self.board_image = tk.PhotoImage(file="ex12//board.png")        self.details = tk.PhotoImage(file= "ex12//under board.png")        self.red = tk.PhotoImage(file="ex12//red.png")        self.draw = tk.PhotoImage(file="ex12//draw.png")        self.blue = tk.PhotoImage(file="ex12//blue.png")        self.red_four = tk.PhotoImage(file="ex12//red win.png")        self.blue_four = tk.PhotoImage(file="ex12//blue win.png")        self.red_cup = tk.PhotoImage(file="ex12//red chalice.png")        self.blue_cup = tk.PhotoImage(file="ex12//blue chalice.png")        self.blue_turn = tk.PhotoImage(file="ex12//blue turn.png")        self.red_turn = tk.PhotoImage(file="ex12//red turn.png")        self.two_players = tk.PhotoImage(file="ex12//two players.png")        self.one_player = tk.PhotoImage(file="ex12//one player.png")        self.no_players = tk.PhotoImage(file="ex12//no players.png")        self.yes = tk.PhotoImage(file="ex12//yes.png")        self.no = tk.PhotoImage(file="ex12//no.png")        self.ask_play_again = tk.PhotoImage(file="ex12//play again.png")        self.__canvas = tk.Canvas(root,width = 530,height = 700, background='#8EF6FF')        self.show_board = self.__canvas.create_image(267, 290, image = self.board_image)        self.show_details = self.__canvas.create_image(267, 620, image = self.details)        self.reds = self.__canvas.create_text(175, 600, text=str(self.__red_counter), fill="white",                                            font = 'Times 15 bold')        self.blues = self.__canvas.create_text(363, 600, text=str(self.__blue_counter), fill="white",                                             font='Times 15 bold')        self.draws = self.__canvas.create_text(268, 600, text=str(self.__draw_counter), fill="white",                                             font='Times 15 bold')        self.__canvas.pack()    def run_game_two_ai(self):        '''this method runs the game of two ai players until the game does not end with        either win or draw it asks the ai for a move, makes it and changes the player'''        self.__ai1 = AI(self.__game, 1)        self.__ai2 = AI(self.__game, 2)        while not self.check_end_game():            self.__canvas.update()            time.sleep(0.5)            if self.__game.get_current_player() == 1:                try:                    column = self.__ai1.find_legal_move()                except:                    return                self.make_turn(column)            elif self.__game.get_current_player() == 2:                try:                    column = self.__ai2.find_legal_move()                except:                    return                self.make_turn(column)        self.show_end_game()    def run_game_one_ai(self):        '''this method runs the game of one ai player and a user player until the game does not end with        either win or draw it either asks the ai for a move, makes it and changes the player, or        asks the user for a move and does the same'''        self.__ai1 = AI(self.__game, 1)        while not self.check_end_game():            self.__canvas.update()            if self.__game.get_current_player() == 1:                self.__canvas.unbind("<Button-1>")                time.sleep(0.5)                try:                    column = self.__ai1.find_legal_move()                except:                    return                self.make_turn(column)            elif self.__game.get_current_player() == 2:                self.__canvas.bind("<Button-1>", self.find_pressed_col)        self.show_end_game()    def run_game(self,event):        '''this method runs the game of 2 user players until the game does not end with        either win or draw it either asks the first user for a move, makes it and changes the player, or        asks the second user for a move and does the same'''        player = random.choice(Four_In_A_Row.PLAYERS)        for i in range(player): #sets a random player to start the game            self.__game.set_current_player()        if self.check_if_in_board(event):            self.show_current_turn()            self.__canvas.delete(self.start)            if self.__is_blue_ai == True and self.__is_red_ai == True:                self.run_game_two_ai()            if self.__is_blue_ai == True and self.__is_red_ai == False:                self.run_game_one_ai()            if self.__is_blue_ai == False and self.__is_red_ai == False:                while not self.check_end_game():                    self.__canvas.update()                    self.__canvas.bind("<Button-1>", self.find_pressed_col)                self.show_end_game()    def two_player_game(self):        '''this method add a pressable text on the board to start the game and removes the        start menu'''        for window in self.__windows:            self.__canvas.delete(window)        self.start = self.__canvas.create_text(250, 250, text='click to start', font='Times 25 bold', fill='red')        self.__canvas.bind("<Button-1>", self.run_game)    def one_player_game(self):        '''this method add a pressable text on the board to start the game and removes the        start menu and makes the is blue ai attribute True'''        for window in self.__windows:            self.__canvas.delete(window)        self.__is_blue_ai = True        self.start = self.__canvas.create_text(250,250,text = 'click to start', font ='Times 25 bold', fill = 'red' )        self.__canvas.bind("<Button-1>", self.run_game)    def no_players_game(self):        '''this method add a pressable text on the board to start the game and removes the                start menu and makes the is_blue_ai,is_red_ai attributes True'''        for window in self.__windows:            self.__canvas.delete(window)        self.__is_blue_ai = True        self.__is_red_ai = True        self.start = self.__canvas.create_text(250,250,text='click to start', font='Times 25 bold', fill='red')        self.__canvas.bind("<Button-1>", self.run_game)    def get_chosen_column(self, click):        '''this method returns the number of column that the user pressed'''        return int((click.x-self.X_MIN)/self.COLUMN_SIZE)    def get_current_color(self):        '''this method returns the current color of the players'''        if self.__game.get_current_player() == 2:            return self.red        if self.__game.get_current_player() == 1:            return self.blue    def check_if_in_board(self, click):        '''this method checks if the user clicked inside the board'''        if self.X_MIN<click.x<self.X_MAX and self.Y_MIN<click.y<self.Y_MAX:            return True        return False    def find_pressed_col(self,event):        '''this method checks if the click was on the board, finds the column and calls        the make_turn method'''        if self.check_if_in_board(event):            column = int(self.get_chosen_column(event))            self.make_turn(column)    def make_turn(self, column):        '''this method finds the lowest empty row on the column given checks the color of        the player, and adds the disk to the cell and changes the turn, if the user clicked in a full column        he is goven an error message if an illegal move, if the game is either won or a draw it returns        without making the move'''        row = self.__game.get_empty_row(column)        color = self.get_current_color()        if self.check_end_game():            return        try:            self.__game.make_move(column)        except:            if self.__game.get_current_player() == 1 and self.__is_blue_ai == False\                    or self.__game.get_current_player() == 2 and self.__is_red_ai == False:#check if the move is not ai                messagebox.showerror("Error", "Illegal move.")            return        self.add_disk(row, column, color)        self.show_current_turn()        if self.check_end_game():            return    def show_end_game(self):        '''this method calls the methods that show if either the game is won or draw, and shows the play        again menu'''        if self.__game.get_winner() != None and self.__game.get_winner() != 0:            self.show_game_over()            self.__canvas.update()            time.sleep(1)            self.play_again()            return        elif self.__game.get_winner() == 0:            self.__canvas.delete(self.draws)            self.show_draw()            self.__canvas.update()            time.sleep(1)            self.play_again()            return    def check_end_game(self):        '''this method checks if the game is either won or a draw and returns True, if not returns False'''        if (self.__game.get_winner() != None and self.__game.get_winner() != 0) or self.__game.get_winner() == 0:            return True        return False    def show_draw(self):        '''this method shows the draw image'''        self.__canvas.delete(self.show_details)        self.__canvas.delete(self.__current_turn)        self.__canvas.create_image(267, 620, image = self.draw)    def get_winner_color(self):        '''this method removes the counters at the under the board and returns the color        of the winner'''        if self.__game.get_winner() == 1:            self.__canvas.delete(self.reds)            self.__canvas.delete(self.blues)            return self.blue_four        if self.__game.get_winner() == 2:            self.__canvas.delete(self.reds)            self.__canvas.delete(self.blues)            return self.red_four    def get_cup_color(self):        '''this method returns the winning cup image depending on the winner color'''        if self.__game.get_winner() == 1:            return self.blue_cup        if self.__game.get_winner() == 2:            return self.red_cup        return    def show_game_over(self):        '''this method adds to the canvas the winning cup and the discs that won the game'''        win_disc_color = self.get_winner_color()        cup_color = self.get_cup_color()        foursome = self.__game.get_the_foursome()        for disc in foursome:            row, col = disc[0], disc[1]            self.add_disk(row, col, win_disc_color)        self.add_victory(cup_color)    def show_current_turn(self):        '''this method changes the turn of the current player and adds the new turn image to        the canvas'''        self.__canvas.delete(self.__current_turn)        if self.__game.get_current_player() == 1:            self.__current_turn = self.__canvas.create_image(436, 590, image=self.blue_turn)        if self.__game.get_current_player() == 2:            self.__current_turn = self.__canvas.create_image(97, 588, image=self.red_turn)    def add_disk(self,row, column,color):        '''this method adds the images of the disc to the board'''        if row == None:            return        x, y = 58.5+self.COLUMN_SIZE*column,87+self.ROW_SIZE*row        disc = self.__canvas.create_image(x, y, image=color)        self.__discs.append(disc)    def play_again(self):        '''this method shows the play again message with 2 optinal buttons to quit or        to play again'''        self.__canvas.create_image(265,270,image = self.ask_play_again)        self.yes_but = tk.Button(self.__canvas, image = self.yes, command = self.start_new_game)        self.no_but = tk.Button(self.__canvas, image = self.no, command = self.__root.destroy)        window_menu1 = self.__canvas.create_window(215,350,window = self.yes_but)        window_menu2 = self.__canvas.create_window(315,350,window = self.no_but)        self.__windows.append(window_menu1)        self.__windows.append(window_menu2)        self.__canvas.unbind("<Button-1>")    def start_new_game(self):        '''this method deletes the old canvas make a new game with a new canvas with counters        from last game shown'''        if self.get_cup_color() == self.blue_cup:            self.__blue_counter +=1        if self.get_cup_color() == self.red_cup:            self.__red_counter += 1        if  self.get_cup_color() == None:            self.__draw_counter +=1        self.__canvas.destroy()        game = Game()        four_in_a_row = Four_In_A_Row(self.__root, game, self.__red_counter,self.__blue_counter,self.__draw_counter)        four_in_a_row.start_menu()    def add_victory(self, color):        '''this method shows the image of the cup with the winner's color on the canvas'''        self.__canvas.delete(self.show_details)        self.__canvas.create_image(267,620, image=color)    def start_menu(self):        '''this method shows the start menu with 3 buttons to either play with 2 users, 2 ai players,        or 1 user and 1 ai player'''        for window in self.__windows:            self.__canvas.delete(window)        two_players = tk.Button(self.__canvas, image = self.two_players, command = self.two_player_game)        one_player = tk.Button(self.__canvas, image = self.one_player, command = self.one_player_game)        no_players = tk.Button(self.__canvas, image=self.no_players, command=self.no_players_game)        one_button = self.__canvas.create_window(150,250,window = one_player)        two_button = self.__canvas.create_window(350,250,window = two_players)        no_button =  self.__canvas.create_window(250,350,window = no_players)        self.__windows.append(one_button)        self.__windows.append(two_button)        self.__windows.append(no_button)def main():    '''this function is the main function that creates the root and the objects of the game    and the gui four in a row and start the game'''    root = tk.Tk()    root.resizable(False, False)    positionRight = int(root.winfo_screenwidth() / 3)    positionDown = int(root.winfo_screenheight() / 6)    root.geometry("+{}+{}".format(positionRight, positionDown))    game = Game()    four_in_a_row = Four_In_A_Row(root, game,0,0,0)    four_in_a_row.start_menu()    root.mainloop()if __name__ == '__main__':    main()