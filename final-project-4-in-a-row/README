315148239
yaron levi

ex12 review:
class Four_In_A_Row:
a class Four In A Row that makes the gui object of the game four in a row and has the folliwing methods:
1) __init__(self,root,game,red_counter = 0,blue_counter = 0,draw_counter = 0): this method is the constructor
of the objects in the class (the four in a row game) and gives it the attributes: root,game,red_counter,
blue counter,draw_counter, all the images nedded for the gui and creates the canvas.
2)run_game_two_ai(self): this method runs the game of two ai players until the game does not end with
either win or draw it asks the ai for a move, makes it and changes the player.
3)run_game_one_ai(self): this method runs the game of one ai player and a user player until the game does not end with
either win or draw it either asks the ai for a move, makes it and changes the player, or asks the user for a move
and does the same.
4)run_game(self,event): this method runs the game of 2 user players until the game does not end with
either win or draw it either asks the first user for a move, makes it and changes the player, or
asks the second user for a move and does the same.
5)two_player_game(self): this method add a pressable text on the board to start the game and removes the
start menu.
6)one_player_game(self): this method add a pressable text on the board to start the game and removes the
start menu and makes the is blue ai attribute True.
7)no_players_game(self): this method add a pressable text on the board to start the game and removes the
start menu and makes the is_blue_ai,is_red_ai attributes True.
8)get_chosen_column(self, click): this method returns the number of column that the user pressed.
9)get_current_color(self): this method returns the current color of the players.
10)check_if_in_board(self, click): this method checks if the user clicked inside the board.
11)find_pressed_col(self,event): this method checks if the click was on the board, finds the column and calls
the make_turn method.
12)make_turn(self, column): this method finds the lowest empty row on the column given checks the color of
the player, and adds the disk to the cell and changes the turn, if the user clicked in a full column
he is goven an error message if an illegal move, if the game is either won or a draw it returns
without making the move.
13)show_end_game(self): this method calls the methods that show if either the game is won or draw, and shows the play
again menu.
14)check_end_game(self): this method checks if the game is either won or a draw and returns True, if not returns False.
15)show_draw(self): this method shows the draw image.
16)get_winner_color(self): this method removes the counters at the under the board and returns the color
of the winner.
17)get_cup_color(self): this method returns the winning cup image depending on the winner color.
18)show_game_over(self): this method adds to the canvas the winning cup and the discs that won the game.
19)show_current_turn(self): this method changes the turn of the current player and adds the new turn image to
the canvas.
20)add_disk(self,row, column,color): this method adds the images of the disc to the board.
21)play_again(self): this method shows the play again message with 2 optinal buttons to quit or
to play again.
22)start_new_game(self): this method deletes the old canvas make a new game with a new canvas with counters
from last game shown.
23)add_victory(self, color): this method shows the image of the cup with the winner's color on the canvas.
24)this method shows the start menu with 3 buttons to either play with 2 users, 2 ai players,
or 1 user and 1 ai player.

class AI:
a class ai that makes the object of the ai players and has the following methods:
1)__init__(self, game, player): this method is the constructor of the objects in the class (the AI players)
and gives them their attributes: game, player.
2)find_legal_move(self): this method picks a random number from 0 to 6 and if the column with the num isn't full retuns
it and if it is full finds a different number.

class Game:
a class game that makes the object of the game and has the following methods:
1)__init__(self): this method is the constructor of the objects in the class (the game)
and gives it the attributes: current player,num of rows,num of columns, the board,
the status of the winner and a list of the four winning disks.
2)make_move(self, column): this method recieves a number of column, checks if the move is llegal,
if it is finds lowest empty row in the column places the disc on the board
then checks if the game is won if not changes the players turn.
3)get_empty_row(self, column): this method recieves a column and returns the lowest row on the column.
4)get_winner(self): this method returns the winner.
5)get_player_at(self, row, col): this method recieves a place on the board and returns the player that
is on the board, if the place is empty returns None.
6)get_current_player(self): this method returns the current player.
7)set_current_player(self): this method changes the current player.
8)get_the_foursome(self): this method returns the list of the disks that are 4 in a row, line and diagonale.
9)check_if_in_board(self, row, col): this method checks if the place given is on the board and returns True if is,
if not returns False.
10)is_draw(self): this method checks if the all the cells on the board are full, returns True,
else returns False.
11)get_all_cells(self): this method returns all the cells in the board.
12)check_four_in_row(self,row): this method recieves a number of a row and returns a list if the row has
4 close disks with the same color.
13)check_four_in_column(self,column): this method recieves a number of a column and returns a list if the column has
4 close disks with the same color.
14)check_four_in_diag_left_up(self,row,col): this method recieves a number of a column and a row and returns a list
if the there is 4 close disks with the same color on the diagonale from left side up to right side down.
15)check_four_in_diag_left_down(self,row,col): this method recieves a number of a column and a row and returns a list
if the there is 4 close disks with the same color on the diagonale from left side down to right side up.
16)check_for_four(self, row, col): this method recieves a number of a row and a number of a column makes 4 lists and
if the lists are not empty every coordinate on the list is appended to the foursome list
and returns True, if all lists are empty returns False.

class Board:
a class board that makes the object of the board for the game that has the following methods:
1)__init__(self, rows, cols): this method is the constructor of the class it gives the object the following attributes:
number of rows, number of columns, and a list of cells.
2)init_board_cells(self): this method creates a list of lists that has all the cells on the board.
3)__repr__(self): this method returns a string that represets the board.
4)get_empty_row(self, col): this method recieves a column and returns the the lowest row that is empty.
5)insert_disc(self,row,col,disc_color): this method inserts a disc on a given cell.
6)get_cells(self): this method returns all a list of lists that contains the cells of the board.
7)empty_cells(self): this method returns True if all the cells are empty and False if not.
8)make_column(self,column): this method makes a string of a column from the board.
9)make_row(self,row): this method makes a string of a row from the board.
10)make_diag_left_up(self,row,col): this method makes a string of the left up down diagonal on the board
that contains the given coordinate and returns a list of the coordinates.
11)make_diag_left_down(self,row,col): this method makes a string of the left down up diagonal on the board
that contains the given coordinate and returns a list of the coordinates.

function main():
this function is the main function that creates the root and the objects of the game
and the gui four in a row and start the game.





























