from .board import Boardclass Game:    '''a class game that makes the object of the game'''    ROWS = 6    COLUMNS = 7    def __init__(self):        '''this method is the constructor of the objects in the class (the game)         and gives it the attributes: current player,num of rows,num of columns, the board,         the status of the winner and a list of the four winning disks'''        self.__current_player = 1        self.__rows = Game.ROWS        self.__columns = Game.COLUMNS        self.__board = Board(self.__rows,self.__columns)        self.__winner = None        self.__the_foursome = []    def make_move(self, column):        '''this method recieves a number of column, checks if the move is llegal,        if it is finds lowest empty row in the column places the disc on the board        then checks if the game is won if not changes the players turn'''        color = str(self.get_current_player())        row = self.get_empty_row(column)        try:            player = self.get_player_at(row, column)        except:            player = False            row = None        if row == None or player == False or self.__winner != None:            raise Exception("Illegal Move.")        self.__board.insert_disc(row, column, color)        if self.check_for_four(row,column):            self.__winner = int(color)            return        self.set_current_player()    def get_empty_row(self, column):        '''this method recieves a column and returns the lowest row on the column'''        if type(column)==int and 0<=column<self.__columns and column != None:            return self.__board.get_empty_row(column)        else:            return    def get_winner(self):        '''this method returns the winner'''        if self.is_draw() and self.__winner == None:            self.__winner = 0            return self.__winner        return self.__winner    def get_player_at(self, row, col):        '''this method recieves a place on the board and returns the player that        is on the board, if the place is empty returns None'''        if row == None or row<0 or row>Game.ROWS-1 or col<0 or col>Game.COLUMNS-1:            raise Exception("Illegal location.")        cells = self.__board.get_cells()        if cells[row][col] == " ":            return None        return int(cells[row][col])    def get_current_player(self):        '''this method returns the current player'''        return self.__current_player    def set_current_player(self):        '''this method changes the current player'''        self.__current_player = (-1)*(self.__current_player-3)    def get_the_foursome(self):        '''this method returns the list of the disks that are 4 in a row, line and diagonale'''        return self.__the_foursome    def check_if_in_board(self, row, col):        '''this method checks if the place given is on the board and returns True if is, if not        returns False'''        if 0<=row<self.__rows and 0<=col<self.__columns:            return True        return False    def is_draw(self):        '''this method checks if the all the cells on the board are full, returns True,        else returns False'''        if self.__board.empty_cells():            return True        return False    def get_all_cells(self):        '''this method returns all the cells in the board'''        return self.__board.get_cells()    def check_four_in_row(self,row):        '''this method recieves a number of a row and returns a list if the row has        4 close disks with the same color'''        lst = []        board = self.__board.make_row(row)        if str(self.__current_player)*4 in board:                start_four = board.find(str(self.__current_player)*4)                for i in range(start_four,start_four+4):                    lst.append([row,i])        return lst    def check_four_in_column(self,column):        '''this method recieves a number of a column and returns a list if the column has        4 close disks with the same color'''        lst = []        board = self.__board.make_column(column)        if str(self.__current_player)*4 in board:                start_four = board.find(str(self.__current_player)*4)                for i in range(start_four,start_four+4):                     lst.append((i,column))        return lst    def check_four_in_diag_left_up(self,row,col):        '''this method recieves a number of a column and a row and returns a list if the there is        4 close disks with the same color on the diagonale from left side up to right side down'''        lst = []        board,diag_lst = self.__board.make_diag_left_up(row,col)        if str(self.__current_player)*4 in board:            start_four = board.find(str(self.__current_player)*4)            for i in range(start_four, start_four + 4):                lst.append(diag_lst[i])        return lst    def check_four_in_diag_left_down(self,row,col):        '''this method recieves a number of a column and a row and returns a list if the there is        4 close disks with the same color on the diagonale from left side down to right side up'''        lst = []        board,diag_lst = self.__board.make_diag_left_down(row,col)        if str(self.__current_player)*4 in board:            start_four = board.find(str(self.__current_player)*4)            for i in range(start_four, start_four + 4):                lst.append(diag_lst[i])        return lst    def check_for_four(self, row, col):        '''this method recieves a number of a row and a number of a column makes 4 lists and        if the lists are not empty every coordinate on the list is appended to the foursome list        and returns True, if all lists are empty returns False'''        lst_row = self.check_four_in_row(row)        lst_col = self.check_four_in_column(col)        lst_diag_up_left = self.check_four_in_diag_left_up(row,col)        lst_diag_down_left = self.check_four_in_diag_left_down(row,col)        if lst_row == [] and lst_col == [] and lst_diag_up_left == [] and lst_diag_down_left == []:            return False        if lst_row != []:            for i  in lst_row:                self.__the_foursome.append(i)        if lst_col != []:            for i in lst_col:                self.__the_foursome.append(i)        if lst_diag_up_left != []:            for i in lst_diag_up_left:                self.__the_foursome.append(i)        if lst_diag_down_left != []:            for i in lst_diag_down_left:                self.__the_foursome.append(i)        return True